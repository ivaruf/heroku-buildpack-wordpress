#!/bin/bash
# Usage: bin/compile BUILD_DIR CACHE_DIR ENV_DIR

set -e
set -o pipefail

export_env_dir() {
  env_dir=$1
  if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
      export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}

export_env_dir $3

# START CONFIG

# Support end-user configured NGINX_VERSION, PHP_VERSION, WORDPRESS_VERSION,
# S3_BUCKET environment variables. This way, end-users
# can choose exactly which versions to run with. Requires user-env-compile for now,
# but will continue to work when Heroku deprecates user-env-compile and ENV_DIR
# appears to this script as a parameter.

if [ -z "$NGINX_VERSION" ]; then
  NGINX_VERSION=1.4.2
fi

if [ -z "$PHP_VERSION" ]; then
  PHP_VERSION=5.5.2
fi

if [ -z "$WORDPRESS_VERSION" ]; then
  WORDPRESS_VERSION=3.7.1
fi

if [ -z "$S3_BUCKET" ]; then
  S3_BUCKET=heroku-buildpack-wordpress
fi

S3_BUCKET_R=heroku-buildpack-php-tyler
NEWRELIC_VERSION=2.9.5.78

# END CONFIG

#
NGINX_URL="https://s3.amazonaws.com/${S3_BUCKET}/nginx-${NGINX_VERSION}-heroku.tar.gz"
PHP_URL="https://s3.amazonaws.com/${S3_BUCKET}/php-${PHP_VERSION}-with-fpm-heroku.tar.gz"
WORDPRESS_URL="http://wordpress.org/wordpress-${WORDPRESS_VERSION}.tar.gz"
S3_URL_R="https://s3.amazonaws.com/${S3_BUCKET_R}"
NEWRELIC_FILE="newrelic-${NEWRELIC_VERSION}-heroku.tar.gz"
NEWRELIC_URL="${S3_URL_R}/${NEWRELIC_FILE}"
#

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

function download_url() {
	TARGET_URL="$1"
	curl -s -S -O -L -m 300 --connect-timeout 60 "$TARGET_URL"
}

function check_md5() {
	SUMS_FILE="${BUNDLE_DIR}/${MANIFEST_FILE}"
	TARGET="$1"
	SUM=`cat "${SUMS_FILE}" | grep "${TARGET}" | cut -d ' ' -f 1`
	OUTPUT=`md5sum ${BUNDLE_DIR}/${TARGET} | cut -d ' ' -f 1`
	! [ "$SUM" = "$OUTPUT" ]
}

BUILD_DIR=$1
CACHE_DIR=$2
mkdir -p $BUILD_DIR $CACHE_DIR

# Nginx
cd ${BUILD_DIR}
if [ ! -d ./vendor/nginx ]; then
  echo "-----> Installing Nginx v${NGINX_VERSION}"
  mkdir -p ./vendor/nginx && cd ./vendor/nginx
  curl --silent --max-time 60 --location $NGINX_URL | tar xz
fi

# PHP
cd ${BUILD_DIR}
if [ ! -d ./vendor/php ]; then
  echo "-----> Installing PHP v${PHP_VERSION}"
  mkdir -p ./vendor/php && cd ./vendor/php
  curl --silent --max-time 60 --location $PHP_URL | tar xz
fi

# newrelic
echo "-----> Installing newrelic"
curl -L "http://download.newrelic.com/php_agent/archive/${NEWRELIC_VERSION}/newrelic-php5-${NEWRELIC_VERSION}-linux.tar.gz" | tar xz
mkdir -p $BUILD_DIR/vendor/newrelic/{bin,etc}

cd "newrelic-php5-${NEWRELIC_VERSION}-linux"

cp -f "daemon/newrelic-daemon.x64" $BUILD_DIR/vendor/newrelic/bin/newrelic-daemon"
cp -f "agent/x64/newrelic-20100525.so" "/app/vendor/php/lib/php/extensions/no-debug-non-zts-20121212/newrelic.so"

echo "trying to find"
find /app/vendor/php/lib/php/extensions/no-debug-non-zts-20121212/
echo "and found?"

# Wordpress
echo "-----> Installing Wordpress v${WORDPRESS_VERSION}"
cd ${BUILD_DIR}
curl --silent --max-time 60 --location $WORDPRESS_URL | tar xz

# Support installation of WordPress into a subdirectory instead of the docroot
if [ -n "$WORDPRESS_DIR" ]; then
  echo "       Installing to subdirectory ${WORDPRESS_DIR}"
  mkdir "public"
  mv wordpress "public/$WORDPRESS_DIR"
  WORDPRESS_INSTALLATION_DIR="public/$WORDPRESS_DIR"
else
  echo "       WORDPRESS_DIR not set. Installing WordPress to /"
  mv wordpress public
  WORDPRESS_INSTALLATION_DIR="public"
fi

echo "-----> Writing start.sh script"

mkdir -p ${BUILD_DIR}/bin
cd ${BUILD_DIR}

# Setup
cat >>bin/setup.sh <<EOF
#!/usr/bin/env bash
cp -rf /app/config/* /app

cp /app/vendor/php/php/fpm/status.html /app/public/status.html
cp /app/vendor/php/apc.php /app/public/apc.php
erb /app/vendor/nginx/conf/wordpress.conf.erb > /app/vendor/nginx/conf/wordpress.conf
chmod 755 /app/public/wp-content

touch /app/vendor/nginx/logs/access.log /app/vendor/nginx/logs/error.log /app/vendor/php/var/log/php-fpm.log /app/vendor/php/var/log/php-errors.log /app/local/var/log/newrelic/newrelic-daemon.log /app/local/var/log/newrelic/php_agent.log
mkdir -p client_body_temp fastcgi_temp proxy_temp scgi_temp uwsgi_temp
(tail -f -n 0 /app/vendor/nginx/logs/*.log /app/vendor/php/var/log/*.log /app/local/var/log/newrelic/*.log &)

# Set NEWRELIC key
if [ -x "/app/local/bin/newrelic-license" ]; then
	/app/local/bin/newrelic-license
fi

if [ "\${NEW_RELIC_LICENSE_KEY}" ]; then
    echo "Launching new relic ... "
    /app/local/bin/newrelic-daemon -c /app/local/etc/newrelic.cfg -d error
	# ${BUILD_DIR}/local/bin/newrelic-daemon -c ${BUILD_DIR}/local/etc/newrelic.cfg -d error
fi

# Preserve current php-fpm.conf so that env list does
# not go out of hand across restarts.
if [ -r /app/vendor/php/etc/php-fpm.conf.current ]; then
	cp -f /app/vendor/php/etc/php-fpm.conf.current /app/vendor/php/etc/php-fpm.conf
else
	cp -f /app/vendor/php/etc/php-fpm.conf /app/vendor/php/etc/php-fpm.conf.current
fi

# Expose Heroku config vars to PHP-FPM processes
for var in \`env | cut -f1 -d=\`; do
	echo "env[\$var] = \\$\${var}" >> /app/vendor/php/etc/php-fpm.conf
done


EOF
chmod +x bin/setup.sh

# Cron job
cat >>bin/cron.sh <<EOF
#!/usr/bin/env bash

setup.sh && cd $WORDPRESS_INSTALLATION_DIR && php wp-cron.php
EOF
chmod +x bin/cron.sh

# Startup
cat >>bin/start.sh <<EOF
#!/usr/bin/env bash
echo "Starting nginx"
setup.sh
(tail -qF -n 0 /app/vendor/nginx/logs/*.log /app/vendor/php/var/log/*.log &)
php-fpm
nginx
EOF
chmod +x bin/start.sh

echo "-----> Done with compile"
